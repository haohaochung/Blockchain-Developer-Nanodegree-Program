// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require('SquareVerifier');

// - use the contents from proof.json generated from zokrates steps
const proof = require('../../zokrates/code/square/proof1.json');


contract('SquareVerifier', (accounts) => {

    let contract;
    describe('Test verification with proof generated by Zokrates', () => {

        beforeEach(async () => { 
            contract = await SquareVerifier.new({ from: accounts[0] });
        });

        // Test verification with correct proof
        it('Test verification with correct proof', async () => { 
            const result = await contract.verifyTx.call(
                proof.proof.A,
                proof.proof.A_p,
                proof.proof.B,
                proof.proof.B_p,
                proof.proof.C,
                proof.proof.C_p,
                proof.proof.H,
                proof.proof.K,
                proof.input
            );

            assert.equal(result, true);
        });

        // Test verification with incorrect proof
        it('Test verification with incorrect proof', async () => { 
            const cheatInput = [1, 1];

            const result = await contract.verifyTx.call(
                proof.proof.A,
                proof.proof.A_p,
                proof.proof.B,
                proof.proof.B_p,
                proof.proof.C,
                proof.proof.C_p,
                proof.proof.H,
                proof.proof.K,
                cheatInput
            );

            assert.equal(result, false);
        });
    });
});
    
